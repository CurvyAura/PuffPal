@page "/register"

@inject IAccountManagement Acct; // Injects the account management service for user registration
@inject NavigationManager NavManager; // Injects the navigation manager for page redirection

<div class="px-4 py-5 min-vh-100 bg-black text-light">
    <div class="mx-auto" style="max-width: 400px;">
        <h3 class="mb-4 text-center text-light">📝 Register</h3>
        <EditForm Model="@registrationModel" OnValidSubmit="SignUp">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label class="form-label text-secondary">Username</label>
                <input class="form-control bg-dark text-light border-secondary" @bind-value="@registrationModel.UserName" />
                <ValidationMessage For="@(() => registrationModel.UserName)" class="text-danger small" />
            </div>
            <div class="mb-3">
                <label class="form-label text-secondary">Email address</label>
                <input type="email" class="form-control bg-dark text-light border-secondary" @bind-value="@registrationModel.Email" />
                <ValidationMessage For="@(() => registrationModel.Email)" class="text-danger small" />
            </div>
            <div class="mb-3">
                <label class="form-label text-secondary">Password</label>
                <input type="password" class="form-control bg-dark text-light border-secondary" @bind-value="@registrationModel.Password" />
                <ValidationMessage For="@(() => registrationModel.Password)" class="text-danger small" />
            </div>
            <div class="text-end mb-3">
                <NavLink class="text-decoration-none text-info small" href="/login">
                    <span>Already have an account?</span>
                </NavLink>
            </div>
            <div class="text-center">
                <button class="btn btn-primary w-100 py-2" type="submit">
                    <span class="@_spinnerClass me-2" role="status" aria-hidden="true"></span>
                    Register
                </button>
            </div>
        </EditForm>
    </div>
</div>


@code {
    // Model for capturing user registration data
    SignUp registrationModel = new();

    // List of error messages returned from the registration process
    private string[] errorList = [];

    // CSS class for showing a spinner during the registration process
    private string _spinnerClass = "";

    // Placeholder for a user avatar (currently unused)
    private string _userAvatar = "content/PuffPal.Shared/favicon.png";

    // Handles the registration process when the form is submitted
    private async void SignUp()
    {
        // Show the spinner while processing the registration
        _spinnerClass = "spinner-border spinner-border-sm";

        // Call the account management service to register the user
        var result = await Acct.RegisterAsync(registrationModel.Email, registrationModel.UserName, registrationModel.Password);

        if (result.Succeeded)
        {
            // Redirect to the login page if registration is successful
            NavManager.NavigateTo("/login");
        }
        else
        {
            // Hide the spinner and display error messages if registration fails
            _spinnerClass = "";
            errorList = result.ErrorList;
        }
    }
}

