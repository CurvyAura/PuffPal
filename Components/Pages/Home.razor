@page "/home"
@using PuffPal.Services
@using System.Text.Json
@using System.Diagnostics
@inject FirebaseService Firebase  
@inject CustomAuthStateProvider AuthStateProvider
@attribute [Authorize]

<div class="min-vh-100 bg-black text-light py-4 px-3">

    <div class="text-center mb-4">
        <h1 class="display-4 fw-bold text-light">PuffPal</h1>
        <p class="lead text-muted">Break Free Today</p>
    </div>

    <!-- Big Puff Button -->
    <div class="text-center mb-4">
        <button class="btn btn-danger btn-lg w-100 py-4 fs-3 fw-bold shadow" @onclick="PuffAdd">
            🚬 Tap to Add a Puff: <span class="fw-bolder">@PuffsTaken</span>
        </button>
    </div>

    <!-- Stat Cards Row -->
    <div class="row g-3 justify-content-center mb-4">
        <div class="col-6 col-md-3">
            <div class="card bg-dark border-secondary text-center">
                <div class="card-body p-3">
                    <h6 class="text-secondary">Weekly Avg</h6>
                    <div class="display-6 text-light">@PuffsAvg</div>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-3">
            <div class="card bg-dark border-secondary text-center">
                <div class="card-body p-3">
                    <h6 class="text-secondary">Streak</h6>
                    <div class="display-6 text-light">@StreakDays</div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="card bg-dark border-secondary text-center">
                <div class="card-body p-3">
                    <h6 class="text-secondary">Time Since Last Puff</h6>
                    <div class="h4 text-light">@FormattedTimeSinceLastPuff</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quit Date and Logout Buttons -->
    <div class="d-grid gap-3 mb-5">
        <button class="btn btn-outline-light" @onclick="ShowQuitDatePopup">📅 Set Quit Date</button>
        <NavLink href="/logout" class="btn btn-outline-danger">Logout</NavLink>
    </div>
</div>

@if (showQuitDatePopup)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.75);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content bg-dark text-light border border-secondary rounded shadow-lg">
                <div class="modal-header border-bottom border-secondary">
                    <h5 class="modal-title">📅 Set Your Quit Date</h5>
                    <button type="button" class="btn-close btn-close-white" aria-label="Close" @onclick="CloseQuitDatePopup"></button>
                </div>
                <div class="modal-body">
                    <label for="quitDate" class="form-label text-secondary">Choose a date you plan to quit</label>
                    <input type="date" id="quitDate" @bind="selectedQuitDate" class="form-control bg-dark text-light border-secondary" />
                </div>
                <div class="modal-footer border-top border-secondary">
                    <button class="btn btn-outline-secondary" @onclick="CloseQuitDatePopup">Cancel</button>
                    <button class="btn btn-success" @onclick="SaveQuitDate">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    public int PuffsTaken = 0; // Placeholder until database is implemented  
    public double PuffsAvg = 0;  
    public int StreakDays = 0;  
    public TimeSpan TimeSinceLastPuff = TimeSpan.Zero;  
    public DateTime? LastPuffTime = null;  // Placeholder until database is implemented  
    private System.Timers.Timer? PuffTimerInstance;  
    private bool showQuitDatePopup = false; // Controls the visibility of the popup
    private DateTime selectedQuitDate = DateTime.Today; // Stores the selected quit date
	public List<int> DailyPuffList = new List<int>(); // Placeholder for daily puff data

    // Show the popup
    private void ShowQuitDatePopup()
    {
        showQuitDatePopup = true;
    }

    // Close the popup
    private void CloseQuitDatePopup()
    {
        showQuitDatePopup = false;
    }

    // Save the quit date
    private async void SaveQuitDate()
    {
        // Retrieve the UID of the logged-in user
        string? userId = AuthStateProvider.GetCurrentUserUid();

        if (string.IsNullOrEmpty(userId))
        {
            Debug.WriteLine("User is not authenticated.");
            return;
        }

        // Save the quit date to Firebase
        await Firebase.SaveUserProfileAsync(userId, selectedQuitDate);

        Debug.WriteLine($"Quit date saved: {selectedQuitDate}");

        // Recalculate and save daily puff goals
        await SaveCalculatedPuffGoalsAsync();

        // Close the popup
        showQuitDatePopup = false;

        StateHasChanged();
    }

	// Calculate and save daily puff goals
    private async Task SaveCalculatedPuffGoalsAsync()
    {
        // Retrieve the UID of the logged-in user
        string? userId = AuthStateProvider.GetCurrentUserUid();

        if (string.IsNullOrEmpty(userId))
        {
            Debug.WriteLine("User is not authenticated.");
            return;
        }

        // Retrieve the quit date
        DateTime? quitDate = await Firebase.GetQuitDateAsync(userId);

        if (!quitDate.HasValue)
        {
            Debug.WriteLine("Quit date not set.");
            return;
        }

        // Calculate the number of days remaining until the quit date
        DateTime today = DateTime.UtcNow.Date;
        int daysUntilQuit = (quitDate.Value.Date - today).Days;

        if (daysUntilQuit <= 0)
        {
            Debug.WriteLine("Quit date is today or in the past.");
            return;
        }

        // Example: Assume averageDailyPuffs is already calculated
        double averageDailyPuffs = PuffsAvg; // Use the calculated weekly average
        Dictionary<string, int> dailyPuffGoals = new Dictionary<string, int>();

        // Distribute the puff reduction linearly over the remaining days
        for (int i = 0; i < daysUntilQuit; i++)
        {
            DateTime targetDate = today.AddDays(i);
            string dateKey = targetDate.ToString("yyyy-MM-dd");

            // Linearly reduce the puff count to zero
            int dailyGoal = (int)Math.Ceiling(averageDailyPuffs * (1 - (double)i / daysUntilQuit));
            dailyPuffGoals[dateKey] = dailyGoal;

            Debug.WriteLine($"Date: {dateKey}, Puff Goal: {dailyGoal}");
        }

        // Save the calculated puff goals to Firebase
        await Firebase.SaveDailyPuffGoalsAsync(userId, dailyPuffGoals);

        Debug.WriteLine("Daily puff goals saved to Firebase.");
    }

    public string FormattedTimeSinceLastPuff =>  
        TimeSinceLastPuff.TotalSeconds > 0  
            ? $"{TimeSinceLastPuff.Hours:D2}:{TimeSinceLastPuff.Minutes:D2}:{TimeSinceLastPuff.Seconds:D2}"  
            : "00:00:00";  

    public async void PuffAdd()
    {
        // Retrieve the UID of the logged-in user
        string? userId = AuthStateProvider.GetCurrentUserUid();

        if (string.IsNullOrEmpty(userId))
        {
            Debug.WriteLine("User is not authenticated.");
            return;
        }

        LastPuffTime = DateTime.Now;

        await Firebase.SaveLastPuffTimeAsync(userId, LastPuffTime.Value);

        await Firebase.SavePuffAsync(userId, LastPuffTime.Value);

        PuffsTaken = await Firebase.GetDailyPuffCountAsync(userId);
        StateHasChanged();

        StreakDays = 0;
        TimeSinceLastPuff = TimeSpan.Zero;
        await CalculateWeeklyAverageAsync();

        Debug.WriteLine($"Updated PuffsTaken: {PuffsTaken}");

        StateHasChanged();
    }

    public void StartPuffTimer()  
    {  
        PuffTimerInstance = new System.Timers.Timer(1000); // 1-second interval  
        PuffTimerInstance.Elapsed += (sender, e) =>  
        {  
            if (LastPuffTime.HasValue)  
            {  
                TimeSinceLastPuff = DateTime.Now - LastPuffTime.Value;  
                InvokeAsync(StateHasChanged); // Update the UI  
            }  
        };  
        PuffTimerInstance.AutoReset = true;  
        PuffTimerInstance.Start();  
    }  

    protected override async Task OnInitializedAsync()
    {
        // Retrieve the UID of the logged-in user
        string? userId = AuthStateProvider.GetCurrentUserUid();

        if (string.IsNullOrEmpty(userId))
        {
            Debug.WriteLine("User is not authenticated.");
            return;
        }

        Debug.WriteLine($"Logged-in User UID: {userId}");

        // Get the puff count for today
        PuffsTaken = await Firebase.GetDailyPuffCountAsync(userId);

        // Get the weekly puff data
        var weeklyPuffData = await Firebase.GetWeeklyPuffDataAsync(userId);

        foreach (var entry in weeklyPuffData)
        {
            Debug.WriteLine($"Date: {entry.Key}, Puff Count: {entry.Value}");
        }

        // Get the last puff time
        LastPuffTime = await Firebase.GetLastPuffTimeAsync(userId);

        if (LastPuffTime.HasValue)
        {
            Debug.WriteLine($"Last Puff Time: {LastPuffTime.Value}");
        }
        else
        {
            Debug.WriteLine("No Last Puff Time found.");
        }

        DailyPuffList = await Firebase.GetDailyPuffDataAsync(userId);
        if (DailyPuffList == null)
        {
            DailyPuffList = new List<int>();
        }

        await StreakChecker();

        // Calculate the weekly average
        await CalculateWeeklyAverageAsync();

        Debug.WriteLine($"Initial PuffsTaken: {PuffsTaken}");

        StartPuffTimer();
    }




    public void StopPuffTimer()  
    {  
        PuffTimerInstance?.Stop();  
        PuffTimerInstance?.Dispose();  
    }  

    public async Task StreakChecker()
    {
        if (DailyPuffList == null || DailyPuffList.Count == 0)
        {
            StreakDays = 0; // No data, no streak
            return;
        }

        // Calculate the streak
        int streak = 0;
        for (int i = DailyPuffList.Count - 1; i >= 0; i--) // Count backward through the list
        {
            if (DailyPuffList[i] == 0) // A day with no puffs
            {
                streak++;
            }
            else
            {
                break; // Stop counting if a day with non-zero puffs is encountered
            }
        }

        StreakDays = streak;
        Debug.WriteLine($"Current Streak: {StreakDays} days");
    }

    public async Task CalculateWeeklyAverageAsync()
    {
        // Retrieve the UID of the logged-in user
        string? userId = AuthStateProvider.GetCurrentUserUid();

        if (string.IsNullOrEmpty(userId))
        {
            Debug.WriteLine("User is not authenticated.");
            return;
        }

        // Get the weekly puff data
        var weeklyPuffData = await Firebase.GetWeeklyPuffDataAsync(userId);

        if (weeklyPuffData == null || weeklyPuffData.Count == 0)
        {
            PuffsAvg = 0; // No data, set average to 0
        }
        else
        {
            // Calculate the average
            PuffsAvg = Math.Round(weeklyPuffData.Values.Average(), 2);
        }

        Debug.WriteLine($"Weekly Average Puffs: {PuffsAvg}");

        StateHasChanged(); // Update the UI
    }

    public Home()
    {
    }

    public void Dispose()  
    {  
       StopPuffTimer(); // Ensure the timer is stopped when the component is disposed  
   }  
}
