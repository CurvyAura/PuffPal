@page "/home"
@using PuffPal.Services
@using System.Text.Json
@using System.Diagnostics
@inject FirebaseService Firebase  
@inject CustomAuthStateProvider AuthStateProvider
@attribute [Authorize] // Add this to any page that the user can see only after they login  

<div class="home-page">  
   <h1>PuffPal</h1>  
   <link rel="stylesheet" href="Home.Razor.css" />  
   <p class="subtitle">Break Free Today</p>

    <!-- Main counter -->
    <button class="btn btn-danger btn-lg text-light" @onclick="PuffAdd">
        Tap to Add a Puff: @PuffsTaken
    </button>

   <!-- Quick stats placeholders -->  
   <div class="stats">  
       <div class="stat">  
           <span>Weekly Avg: @PuffsAvg</span>  
       </div>  
       <div class="stat">  
           <span>Streak: @StreakDays</span>  
       </div>  
       <div class="stat">  
           <span>Time Since Last Puff: @FormattedTimeSinceLastPuff</span>  
       </div>  
   </div>  
</div>  
<div>  
   <button class="btn btn-danger text-light">  
       <NavLink class="nav-link text-light" href="/logout">  
           <span class="text-light" aria-hidden="true"></span> Logout  
       </NavLink>  
   </button>  
</div>  
<div>
    <!-- Button to trigger the popup -->
    <button class="btn btn-success" @onclick="ShowQuitDatePopup">Set Quit Date</button>
</div>

@if (showQuitDatePopup)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Select Your Quit Date</h3>
            <input type="date" @bind="selectedQuitDate" class="form-control" />
            <div class="mt-2">
                <button class="btn btn-success" @onclick="SaveQuitDate">Save</button>
                <button class="btn btn-danger" @onclick="CloseQuitDatePopup">Cancel</button>
            </div>
        </div>
    </div>
}
@code {

    public int PuffsTaken = 0; // Placeholder until database is implemented  
    public double PuffsAvg = 0;  
    public int StreakDays = 0;  
    public TimeSpan TimeSinceLastPuff = TimeSpan.Zero;  
    public DateTime? LastPuffTime = null;  // Placeholder until database is implemented  
    private System.Timers.Timer? PuffTimerInstance;  
    private bool showQuitDatePopup = false; // Controls the visibility of the popup
    private DateTime selectedQuitDate = DateTime.Today; // Stores the selected quit date

    // Show the popup
    private void ShowQuitDatePopup()
    {
        showQuitDatePopup = true;
    }

    // Close the popup
    private void CloseQuitDatePopup()
    {
        showQuitDatePopup = false;
    }

    // Save the quit date
    private async void SaveQuitDate()
    {
        // Retrieve the UID of the logged-in user
        string? userId = AuthStateProvider.GetCurrentUserUid();

        if (string.IsNullOrEmpty(userId))
        {
            Debug.WriteLine("User is not authenticated.");
            return;
        }

        // Save the quit date to Firebase
        await Firebase.SaveUserProfileAsync(userId, selectedQuitDate);

        Debug.WriteLine($"Quit date saved: {selectedQuitDate}");

        // Close the popup
        showQuitDatePopup = false;

        StateHasChanged();
    }
    public string FormattedTimeSinceLastPuff =>  
        TimeSinceLastPuff.TotalSeconds > 0  
            ? $"{TimeSinceLastPuff.Hours:D2}:{TimeSinceLastPuff.Minutes:D2}:{TimeSinceLastPuff.Seconds:D2}"  
            : "00:00:00";  

    // public async void PuffAdd()  
    // {  
    //     Record the time of the puff  
    //     LastPuffTime = DateTime.Now;  
    //     PuffsTaken++;  
    //     StreakDays = 0; Reset streak days on puff  
    //     TimeSinceLastPuff = TimeSpan.Zero; Reset the timer  
    //     await Firebase.SendTestPuffAsync($"Puff tapped at {DateTime.Now}"); Zeus send this to the database, and my life is yours 

    // copied func below, we will need to specify the user that took the puff.
    // }  

    // public async void PuffAdd()
    //       {
    //           Record the time of the puff
    //           LastPuffTime = DateTime.Now;
    //           PuffsTaken++;

    //           Reset streak days and timer
    //           StreakDays = 0;
    //           TimeSinceLastPuff = TimeSpan.Zero;
    //           string jsonname = JsonSerializer.Serialize("Bobby");
    //           DateTime jsondate = DateTime.Now; Use DateTime directly instead of serializing it
    //           Save the puff event to the database
    //           await Firebase.SendTestPuffAsync($"Puff tapped at {DateTime.Now}"); Replace 1 with the actual user ID
    //           await Firebase.SaveUserProfileAsync("000001", jsonname, jsondate); Pass DateTime directly
    //       }

    public async void PuffAdd()
    {
        // Retrieve the UID of the logged-in user
        string? userId = AuthStateProvider.GetCurrentUserUid();

        if (string.IsNullOrEmpty(userId))
        {
            Debug.WriteLine("User is not authenticated.");
            return;
        }

        LastPuffTime = DateTime.Now;

        await Firebase.SaveLastPuffTimeAsync(userId, LastPuffTime.Value);

        await Firebase.SavePuffAsync(userId, LastPuffTime.Value);

        PuffsTaken = await Firebase.GetDailyPuffCountAsync(userId);
        StateHasChanged();

        StreakDays = 0;
        TimeSinceLastPuff = TimeSpan.Zero;

        Debug.WriteLine($"Updated PuffsTaken: {PuffsTaken}");

        StateHasChanged();
    }

    public void StartPuffTimer()  
    {  
        PuffTimerInstance = new System.Timers.Timer(1000); // 1-second interval  
        PuffTimerInstance.Elapsed += (sender, e) =>  
        {  
            if (LastPuffTime.HasValue)  
            {  
                TimeSinceLastPuff = DateTime.Now - LastPuffTime.Value;  
                InvokeAsync(StateHasChanged); // Update the UI  
            }  
        };  
        PuffTimerInstance.AutoReset = true;  
        PuffTimerInstance.Start();  
    }  

    protected override async Task OnInitializedAsync()
    {
        //string userId = "000001"; // Replace with the logged-in user's ID
        // Retrieve the UID of the logged-in user
        string? userId = AuthStateProvider.GetCurrentUserUid();

        if (string.IsNullOrEmpty(userId))
        {
            Debug.WriteLine("User is not authenticated.");
            return;
        }

        Debug.WriteLine($"Logged-in User UID: {userId}");

        // Get the puff count for today
        PuffsTaken = await Firebase.GetDailyPuffCountAsync(userId);


		//get the weekly puff data
        var weeklyPuffData = await Firebase.GetWeeklyPuffDataAsync(userId);

        foreach (var entry in weeklyPuffData)
        {
            Debug.WriteLine($"Date: {entry.Key}, Puff Count: {entry.Value}");
        }

        // Get the last puff time
        LastPuffTime = await Firebase.GetLastPuffTimeAsync(userId);

        if (LastPuffTime.HasValue)
        {
            Debug.WriteLine($"Last Puff Time: {LastPuffTime.Value}");
        }
        else
        {
            Debug.WriteLine("No Last Puff Time found.");
        }
        DailyPuffList = await Firebase.GetDailyPuffDataAsync(userId);
        Debug.WriteLine($"Initial PuffsTaken: {PuffsTaken}");

        await StreakChecker();
        StartPuffTimer();
    }

    public void StopPuffTimer()  
    {  
        PuffTimerInstance?.Stop();  
        PuffTimerInstance?.Dispose();  
    }  

    // public void DailyPuffAvg()  
    // {  
    //     PuffListSetup(); Placeholder for database implementation  
    //     int PuffSum = 0;  
    //     foreach (int puff in DailyPuffList)  
    //     {  
    //         PuffSum += puff;  
    //     }  
    //     PuffsAvg = PuffSum / DailyPuffList.Count;  
    // }  
    // public async Task WeeklyPuffAvg()  
    //    {
    //        Calculate the average  
    //     if (weeklyPuffData != null && weeklyPuffData.Count > 0)
    //     {
    //         PuffsAvg = weeklyPuffData.Values.Average();
    //     }
    //     else
    //     {
    //         PuffsAvg = 0;
    //     }
    // }

    // public void StreakChecker()  
    // {  
    //     PuffListSetup(); Placeholder for database implementation  
    //     int Streak = 0;  
    //     for (int i = DailyPuffList.Count - 1; i >= 0; i--) Count backward through the list  
    //     {  
    //         if (DailyPuffList[i] == 0)  
    //         {  
    //             Streak++;  
    //         }  
    //         else  
    //         {  
    //             break; Stop counting if a day with non-zero puffs is encountered  
    //         }  
    //     }  
    //     StreakDays = Streak;  
    // }  
    public async Task StreakChecker()
    {
        // Fetch daily puff data from the database

        // Calculate the streak
        int streak = 0;
        for (int i = DailyPuffList.Count - 1; i >= 0; i--) // Count backward through the list
        {
            if (DailyPuffList[i] == 0)
            {
                streak++;
            }
            else
            {
                break; // Stop counting if a day with non-zero puffs is encountered
            }
        }
        StreakDays = streak;
    }

    public List<int> DailyPuffList = new List<int>();

    public Home()
    {
    }

    // public void PuffListSetup() Placeholder for database implementation  
    // {  
    //     DailyPuffList.Add(23);  
    //     DailyPuffList.Add(12);  
    //     DailyPuffList.Add(5);  
    //     DailyPuffList.Add(26);  
    //     DailyPuffList.Add(0);  
    // }  

    public void Dispose()  
    {  
       StopPuffTimer(); // Ensure the timer is stopped when the component is disposed  
   }  
}
