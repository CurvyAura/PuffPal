@page "/home"

@using PuffPal.Services
@using System.Text.Json
@using System.Diagnostics

@inject FirebaseService Firebase 
@inject CustomAuthStateProvider AuthStateProvider
@inject IAccountManagement Acct
@inject NavigationManager NavManager

@attribute [Authorize]

<!-- Main container for the Home page -->
<div class="min-vh-100 bg-black text-light py-4 px-3">

    <!-- Header Section -->
    <div class="text-center mb-4">
        <img src="images/puffpal_logo.png" alt="PuffPal Logo" class="img-fluid" style="max-height: 100px;" />
        <!--<p class="lead text-muted">Break Free Today</p>-->
    </div>

    <!-- Big Puff Button Section -->
    <div class="text-center mb-4">
        <button class="btn btn-danger btn-lg w-100 py-4 fs-3 fw-bold shadow" @onclick="PuffAdd">
            🚬 Tap to Add a Puff: <span class="fw-bolder">@PuffsTaken</span>
        </button>
    </div>

    <!-- Statistics Section -->
    <div class="row g-3 justify-content-center mb-4">
        <!-- Current Daily Goal Card -->
        <div class="col-12 col-md-6">
            <div class="card bg-dark border-secondary text-center">
                <div class="card-body p-3">
                    <h6 class="text-secondary">Current Daily Goal</h6>
                    <div class="h4 text-light">@DailyGoal</div>
                </div>
            </div>
        </div>

        <!-- Weekly Average Card -->
        <div class="col-6 col-md-3">
            <div class="card bg-dark border-secondary text-center">
                <div class="card-body p-3">
                    <h6 class="text-secondary">Weekly Avg</h6>
                    <div class="display-6 text-light">@PuffsAvg</div>
                </div>
            </div>
        </div>

        <!-- Streak Card -->
        <div class="col-6 col-md-3">
            <div class="card bg-dark border-secondary text-center">
                <div class="card-body p-3">
                    <h6 class="text-secondary">Streak</h6>
                    <div class="display-6 text-light">@StreakDays</div>
                </div>
            </div>
        </div>

        <!-- Time Since Last Puff Card -->
        <div class="col-12 col-md-6">
            <div class="card bg-dark border-secondary text-center">
                <div class="card-body p-3">
                    <h6 class="text-secondary">Time Since Last Puff</h6>
                    <div class="h4 text-light">@FormattedTimeSinceLastPuff</div>
                </div>
            </div>
        </div>
    </div>

       <!-- Motivational Quote Section -->
   <div class="text-center mb-4">
       <blockquote class="blockquote text-light">
           <p class="mb-0">"@MotivationalQuote"</p>
       </blockquote>
   </div>



    <!-- Quit Date and Logout Buttons Section -->
    <div class="d-grid gap-3 mb-5">
        <button class="btn btn-outline-light" @onclick="ShowQuitDatePopup">📅 Set Quit Date</button>
        <NavLink href="/logout" class="btn btn-outline-danger">Logout</NavLink>
    </div>
</div>

<!-- Quit Date Popup -->
@if (showQuitDatePopup)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.75);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content bg-dark text-light border border-secondary rounded shadow-lg">
                <div class="modal-header border-bottom border-secondary">
                    <h5 class="modal-title">📅 Set Your Quit Date</h5>
                    <button type="button" class="btn-close btn-close-white" aria-label="Close" @onclick="CloseQuitDatePopup"></button>
                </div>
                <div class="modal-body">
                    <label for="quitDate" class="form-label text-secondary">Choose a date you plan to quit</label>
                    <input type="date" id="quitDate" @bind="selectedQuitDate" class="form-control bg-dark text-light border-secondary" />
                </div>
                <div class="modal-footer border-top border-secondary">
                    <button class="btn btn-outline-secondary" @onclick="CloseQuitDatePopup">Cancel</button>
                    <button class="btn btn-success" @onclick="SaveQuitDate">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Tracks the number of puffs taken today
    public int PuffsTaken = 0;

    // Weekly average of puffs
    public double PuffsAvg = 0;

    // Number of consecutive days without a puff
    public int StreakDays = 0;

    // Time elapsed since the last puff
    public TimeSpan TimeSinceLastPuff = TimeSpan.Zero;

    // Timestamp of the last puff
    public DateTime? LastPuffTime = null;

    // Timer instance for updating the time since the last puff
    private System.Timers.Timer? PuffTimerInstance;

    // Controls the visibility of the quit date popup
    private bool showQuitDatePopup = false;

    // Selected quit date
    private DateTime selectedQuitDate = DateTime.Today;

    // List of daily puff counts
    public List<int> DailyPuffList = new List<int>();

    // Current daily puff goal
    public int DailyGoal = 0;

    // Motivational quote of the day
    public string MotivationalQuote { get; set; } = "Loading your daily motivation...";

    // Fetches a random motivational quote
    private async Task FetchMotivationalQuoteAsync()
    {
        // Hardcoded is fine for now, down the road it should go into DB.
        var quotes = new List<string>
        {
            "The journey of a thousand miles begins with a single step.",
            "Believe you can and you're halfway there.",
            "Every day is a chance to get stronger and healthier.",
            "You are stronger than your cravings.",
            "Success is the sum of small efforts, repeated day in and day out.",
            "Your future self will thank you for the choices you make today.",
            "It always seems impossible until it’s done.",
            "Don’t let yesterday take up too much of today.",
            "The secret of getting ahead is getting started.",
            "Small steps in the right direction can turn out to be the biggest step of your life.",
            "You don’t have to be perfect, just consistent.",
            "The pain you feel today will be the strength you feel tomorrow.",
            "Quitting smoking is tough, but so are you.",
            "Your health is your wealth—invest in it wisely.",
            "One puff less today is one step closer to freedom.",
            "You are not giving up something; you are gaining everything.",
            "The best time to quit was yesterday. The second best time is now.",
            "Your body deserves to be treated with respect and care.",
            "Every craving you resist is a victory for your future self.",
            "You are capable of amazing things—don’t let a habit define you."
        };

        // Simulate a delay (e.g., API call)
        await Task.Delay(500);

        // Pick a random quote
        var random = new Random();
        MotivationalQuote = quotes[random.Next(quotes.Count)];
    }



    // Shows the quit date popup
    private void ShowQuitDatePopup()
    {
        showQuitDatePopup = true;
    }

    // Closes the quit date popup
    private void CloseQuitDatePopup()
    {
        showQuitDatePopup = false;
    }

    // Saves the quit date to Firebase and updates puff goals
    private async void SaveQuitDate()
    {
        string? userId = AuthStateProvider.GetCurrentUserUid();

        if (string.IsNullOrEmpty(userId))
        {
            Debug.WriteLine("User is not authenticated.");
            return;
        }

        await Firebase.SaveUserProfileAsync(userId, selectedQuitDate);
        Debug.WriteLine($"Quit date saved: {selectedQuitDate}");

        await SaveCalculatedPuffGoalsAsync();
        showQuitDatePopup = false;
        StateHasChanged();
    }

    // Calculates and saves daily puff goals based on the quit date
    private async Task SaveCalculatedPuffGoalsAsync()
    {
        string? userId = AuthStateProvider.GetCurrentUserUid();

        if (string.IsNullOrEmpty(userId))
        {
            Debug.WriteLine("User is not authenticated.");
            return;
        }

        DateTime? quitDate = await Firebase.GetQuitDateAsync(userId);

        if (!quitDate.HasValue)
        {
            Debug.WriteLine("Quit date not set.");
            return;
        }

        DateTime today = DateTime.UtcNow.Date;
        int daysUntilQuit = (quitDate.Value.Date - today).Days;

        if (daysUntilQuit <= 0)
        {
            Debug.WriteLine("Quit date is today or in the past.");
            return;
        }

        double averageDailyPuffs = PuffsAvg;
        Dictionary<string, int> dailyPuffGoals = new Dictionary<string, int>();

        for (int i = 0; i < daysUntilQuit; i++)
        {
            DateTime targetDate = today.AddDays(i);
            string dateKey = targetDate.ToString("yyyy-MM-dd");

            int dailyGoal = (int)Math.Ceiling(averageDailyPuffs * (1 - (double)i / daysUntilQuit));
            dailyPuffGoals[dateKey] = dailyGoal;

            Debug.WriteLine($"Date: {dateKey}, Puff Goal: {dailyGoal}");
        }

        DailyGoal = dailyPuffGoals[today.ToString("yyyy-MM-dd")];
        await Firebase.SaveDailyPuffGoalsAsync(userId, dailyPuffGoals);
        Debug.WriteLine("Daily puff goals saved to Firebase.");
    }

    // Formats the time since the last puff for display
    public string FormattedTimeSinceLastPuff =>
        TimeSinceLastPuff.TotalSeconds > 0
            ? $"{TimeSinceLastPuff.Hours:D2}:{TimeSinceLastPuff.Minutes:D2}:{TimeSinceLastPuff.Seconds:D2}"
            : "00:00:00";

    // Handles the "Add Puff" button click
    public async void PuffAdd()
    {
        string? userId = AuthStateProvider.GetCurrentUserUid();

        if (string.IsNullOrEmpty(userId))
        {
            Debug.WriteLine("User is not authenticated.");
            return;
        }

        LastPuffTime = DateTime.Now;

        await Firebase.SaveLastPuffTimeAsync(userId, LastPuffTime.Value);
        await Firebase.SavePuffAsync(userId, LastPuffTime.Value);

        PuffsTaken = await Firebase.GetDailyPuffCountAsync(userId);
        StateHasChanged();

        StreakDays = 0;
        TimeSinceLastPuff = TimeSpan.Zero;
        await CalculateWeeklyAverageAsync();

        Debug.WriteLine($"Updated PuffsTaken: {PuffsTaken}");
        StateHasChanged();
    }

    // Starts the timer to update the time since the last puff
    public void StartPuffTimer()
    {
        PuffTimerInstance = new System.Timers.Timer(1000);
        PuffTimerInstance.Elapsed += (sender, e) =>
        {
            if (LastPuffTime.HasValue)
            {
                TimeSinceLastPuff = DateTime.Now - LastPuffTime.Value;
                InvokeAsync(StateHasChanged);
            }
        };
        PuffTimerInstance.AutoReset = true;
        PuffTimerInstance.Start();
    }

    // Initializes the Home page
    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await Acct.CheckAuthAsync();
        Debug.WriteLine($"Home.razor: IsAuthenticated = {isAuthenticated}");

        if (!isAuthenticated)
        {
            NavManager.NavigateTo("/login", true);
            return;
        }

        string? userId = AuthStateProvider.GetCurrentUserUid();

        if (string.IsNullOrEmpty(userId))
        {
            Debug.WriteLine("Firebase client failed to load the user. Redirecting to login.");
            NavManager.NavigateTo("/login", true);
            return;
        }

        Debug.WriteLine($"Logged-in User UID: {userId}");
        await InitializeHomePageAsync();
        await base.OnInitializedAsync();
        await FetchMotivationalQuoteAsync();
    }

    // Loads and initializes data for the Home page
    private async Task InitializeHomePageAsync()
    {
        PuffsTaken = await Firebase.GetDailyPuffCountAsync(AuthStateProvider.GetCurrentUserUid());
        var weeklyPuffData = await Firebase.GetWeeklyPuffDataAsync(AuthStateProvider.GetCurrentUserUid());

        foreach (var entry in weeklyPuffData)
        {
            Debug.WriteLine($"Date: {entry.Key}, Puff Count: {entry.Value}");
        }

        LastPuffTime = await Firebase.GetLastPuffTimeAsync(AuthStateProvider.GetCurrentUserUid());

        if (LastPuffTime.HasValue)
        {
            Debug.WriteLine($"Last Puff Time: {LastPuffTime.Value}");
        }
        else
        {
            Debug.WriteLine("No Last Puff Time found.");
        }

        DailyPuffList = await Firebase.GetDailyPuffDataAsync(AuthStateProvider.GetCurrentUserUid()) ?? new List<int>();

        DateTime? quitDate = await Firebase.GetQuitDateAsync(AuthStateProvider.GetCurrentUserUid());
        if (quitDate.HasValue)
        {
            selectedQuitDate = quitDate.Value;
            Debug.WriteLine($"Quit Date retrieved: {selectedQuitDate}");
        }
        else
        {
            Debug.WriteLine("No Quit Date found in the database.");
        }

        await StreakChecker();
        await CalculateWeeklyAverageAsync();
        await SaveCalculatedPuffGoalsAsync();

        Debug.WriteLine($"Initial PuffsTaken: {PuffsTaken}");
        StartPuffTimer();
    }

    // Stops the puff timer
    public void StopPuffTimer()
    {
        PuffTimerInstance?.Stop();
        PuffTimerInstance?.Dispose();
    }

    // Calculates the user's streak of days without a puff
    public async Task StreakChecker()
    {
        if (DailyPuffList == null || DailyPuffList.Count == 0)
        {
            StreakDays = 0;
            return;
        }

        int streak = 0;
        for (int i = DailyPuffList.Count - 1; i >= 0; i--)
        {
            if (DailyPuffList[i] == 0)
            {
                streak++;
            }
            else
            {
                break;
            }
        }

        StreakDays = streak;
        Debug.WriteLine($"Current Streak: {StreakDays} days");
    }



    // Calculates the weekly average of puffs
    public async Task CalculateWeeklyAverageAsync()
    {
        string? userId = AuthStateProvider.GetCurrentUserUid();

        if (string.IsNullOrEmpty(userId))
        {
            Debug.WriteLine("User is not authenticated.");
            return;
        }

        var weeklyPuffData = await Firebase.GetWeeklyPuffDataAsync(userId);

        if (weeklyPuffData == null || weeklyPuffData.Count == 0)
        {
            PuffsAvg = 0;
        }
        else
        {
            PuffsAvg = Math.Round(weeklyPuffData.Values.Average(), 2);
        }

        Debug.WriteLine($"Weekly Average Puffs: {PuffsAvg}");
        StateHasChanged();
    }

    // Disposes of the puff timer when the component is destroyed
    public void Dispose()
    {
        StopPuffTimer();
    }
}
