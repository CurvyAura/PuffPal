@page "/home"
@using PuffPal.Services
@inject FirebaseService Firebase  
@attribute [Authorize] // Add this to any page that the user can see only after they login  

<div class="home-page">  
   <h1>PuffPal</h1>  
   <link rel="stylesheet" href="Home.Razor.css" />  
   <p class="subtitle">Break Free Today</p>

    <!-- Main counter -->
    <button class="btn btn-danger btn-lg text-light" @onclick="PuffAdd">
        Tap to Add a Puff: @PuffsTaken
    </button>

   <!-- Quick stats placeholders -->  
   <div class="stats">  
       <div class="stat">  
           <span>Daily Avg: @PuffsAvg</span>  
       </div>  
       <div class="stat">  
           <span>Streak: @StreakDays</span>  
       </div>  
       <div class="stat">  
           <span>Time Since Last Puff: @FormattedTimeSinceLastPuff</span>  
       </div>  
   </div>  
</div>  
<div>  
   <button class="btn btn-danger text-light">  
       <NavLink class="nav-link text-light" href="/logout">  
           <span class="text-light" aria-hidden="true"></span> Logout  
       </NavLink>  
   </button>  
</div>  

@code {  

   public int PuffsTaken = 0; // Placeholder until database is implemented  
   public double PuffsAvg = 0;  
   public int StreakDays = 0;  
   public TimeSpan TimeSinceLastPuff = TimeSpan.Zero;  
   private DateTime? LastPuffTime = null;  // Placeholder until database is implemented  
   private System.Timers.Timer? PuffTimerInstance;  

   public string FormattedTimeSinceLastPuff =>  
       TimeSinceLastPuff.TotalSeconds > 0  
           ? $"{TimeSinceLastPuff.Hours:D2}:{TimeSinceLastPuff.Minutes:D2}:{TimeSinceLastPuff.Seconds:D2}"  
           : "00:00:00";  

   // public async void PuffAdd()  
   // {  
   //     Record the time of the puff  
   //     LastPuffTime = DateTime.Now;  
   //     PuffsTaken++;  
   //     StreakDays = 0; Reset streak days on puff  
   //     TimeSinceLastPuff = TimeSpan.Zero; Reset the timer  
   //     await Firebase.SendTestPuffAsync($"Puff tapped at {DateTime.Now}"); Zeus send this to the database, and my life is yours 

   // copied func below, we will need to specify the user that took the puff.
   // }  

    public async void PuffAdd()
    {
        // Record the time of the puff
        LastPuffTime = DateTime.Now;
        PuffsTaken++;

        // Reset streak days and timer
        StreakDays = 0;
        TimeSinceLastPuff = TimeSpan.Zero;

        // Save the puff event to the database
        await Firebase.SendTestPuffAsync($"Puff tapped at {DateTime.Now}"); // Replace 1 with the actual user ID
    }

   public void StartPuffTimer()  
   {  
       PuffTimerInstance = new System.Timers.Timer(1000); // 1-second interval  
       PuffTimerInstance.Elapsed += (sender, e) =>  
       {  
           if (LastPuffTime.HasValue)  
           {  
               TimeSinceLastPuff = DateTime.Now - LastPuffTime.Value;  
               InvokeAsync(StateHasChanged); // Update the UI  
           }  
       };  
       PuffTimerInstance.AutoReset = true;  
       PuffTimerInstance.Start();  
   }  

   protected override async Task OnInitializedAsync()
   {
       // Initialize the app state
       await DailyPuffAvg();
       await StreakChecker();        
       StartPuffTimer(); // Start the timer
   }

   public void StopPuffTimer()  
   {  
       PuffTimerInstance?.Stop();  
       PuffTimerInstance?.Dispose();  
   }  

   // public void DailyPuffAvg()  
   // {  
   //     PuffListSetup(); Placeholder for database implementation  
   //     int PuffSum = 0;  
   //     foreach (int puff in DailyPuffList)  
   //     {  
   //         PuffSum += puff;  
   //     }  
   //     PuffsAvg = PuffSum / DailyPuffList.Count;  
   // }  
    public async Task DailyPuffAvg()
    {
        // Fetch daily puff data from the database
        DailyPuffList = await Firebase.GetDailyPuffDataAsync(userId: 1); // Replace 1 with the actual user ID

        // Calculate the average
        if (DailyPuffList.Count > 0)
        {
            PuffsAvg = DailyPuffList.Average();
        }
        else
        {
            PuffsAvg = 0;
        }
    }

   // public void StreakChecker()  
   // {  
   //     PuffListSetup(); Placeholder for database implementation  
   //     int Streak = 0;  
   //     for (int i = DailyPuffList.Count - 1; i >= 0; i--) Count backward through the list  
   //     {  
   //         if (DailyPuffList[i] == 0)  
   //         {  
   //             Streak++;  
   //         }  
   //         else  
   //         {  
   //             break; Stop counting if a day with non-zero puffs is encountered  
   //         }  
   //     }  
   //     StreakDays = Streak;  
   // }  
    public async Task StreakChecker()
    {
        // Fetch daily puff data from the database
        DailyPuffList = await Firebase.GetDailyPuffDataAsync(userId: 1); // Replace 1 with the actual user ID

        // Calculate the streak
        int streak = 0;
        for (int i = DailyPuffList.Count - 1; i >= 0; i--) // Count backward through the list
        {
            if (DailyPuffList[i] == 0)
            {
                streak++;
            }
            else
            {
                break; // Stop counting if a day with non-zero puffs is encountered
            }
        }
        StreakDays = streak;
    }

   public List<int> DailyPuffList = new List<int>();  

   // public void PuffListSetup() Placeholder for database implementation  
   // {  
   //     DailyPuffList.Add(23);  
   //     DailyPuffList.Add(12);  
   //     DailyPuffList.Add(5);  
   //     DailyPuffList.Add(26);  
   //     DailyPuffList.Add(0);  
   // }  

   public void Dispose()  
   {  
       StopPuffTimer(); // Ensure the timer is stopped when the component is disposed  
   }  
}
